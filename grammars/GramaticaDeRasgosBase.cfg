% start S
# Esta es la gramática de base a la que hay que concatenarle abajo las reglas 
# léxicas por cada categoría.
#
# ###################
# Reglas de la Gramática
# ###################

# Reescritura de la Raíz
S[SEM = <exists e. ?subj(\x. agente(e,x)) & ?vp(e)>] -> NP[NUM=?n, PER=?m, SEM=?subj] VP[+PRINC, MODE=IND, NUM=?n, PER=?m, SEM=?vp]
S[SEM = <exists e. ?subj(\x. agente(e,x)) & ?vp(e)>] -> Pron[NUM=?n, CASO=?s, PER=?m, GEN=?p, SEM=?subj] VP[+PRINC, MODE=IND, NUM=?n, PER=?m, SEM=?vp]
S[SEM = <exists e. ?subj(\x. agente(e,x)) & ?vp(e)>] -> NP[NUM=?n, PER=?m, SEM=?subj] VP[+PRINC, MODE=IND, NUM=?n, PER=?m, SEM=?vp]
S[SEM = <exists e. orden(e) & ?voc(\x. instigado(e,x)) & ?vp(e)>] -> PropN[+ANIM, SEM=?voc] Comma VP[+PRINC, MODE=IMP, NUM=?n, PER=2, SEM=?vp]
S[SEM = <exists e. orden(e) & ?voc(\x. instigado(e,x)) & ?vp(e)>] -> PropN[+ANIM, SEM=?voc] Comma Pron[PER=2] VP[+PRINC, MODE=IMP, NUM=?n, PER=2, SEM=?vp]
S[SEM = <exists e. orden(e) & ?voc(\x. instigado(e,x)) & ?vp(e)>] -> Pron[PER=2] VP[+PRINC, MODE=IMP, NUM=?n, PER=2, SEM=?vp]


# Reescritura de raíz de prueba
# Si quieren probar alguna categoría cualquiera a ver cómo la interpreta para manipularla
# usen esta regla y pongan la categoría que quieren, descoméntenla, y pueden parsear una
# oración con solo esa palabra
# S -> X

# Signos de puntuación

Comma -> ','

# Reescritura de NP
NP[NUM=?n, PER=?m, SEM=?pro] -> PropN[NUM=?n, PER=?m, GEN=?p, SEM=?pro]
NP[NUM=?n, PER=?m, GEN=?g, SEM=<?det(?nom)>] -> D[NUM=?n, PER=?m, GEN=?g, SEM=?det] N[NUM=?n,GEN=?g, SEM=?nom]
NP[NUM=?n, PER=?m, GEN=?g, SEM=<?det(?nom)>] -> D[NUM=?n,GEN=?g, PER=?m, SEM=?det] NominalP[NUM=?n,GEN=?g, SEM=?nom]
NominalP[NUM=?n, GEN=?g, SEM=<\x. (?nom(x) & ?ad(x))>] -> N[NUM=?n,GEN=?g, SEM=?nom] A[Num=?n, GEN=?g, SEM=?ad]

# Reescritura de VP

# VPs matrices (i.e., en cláusulas principales)

# VPs intransitivos

VP[+PRINC, MODE=IND, NUM=?n, PER=?p, TENSE=?t, SEM=?s] -> Verb[SUBCAT=M, MODE=IND, TENSE=?t, PER=?p, NUM=?n, SEM=?s]
VP[+PRINC, MODE=IMP, NUM=?n, PER=2, TENSE=?t, SEM=?s] -> V[SUBCAT=M, MODE=IMP, TENSE=?t, PER=2, NUM=?n, SEM=?s]

# VPs transitivos
VP[+PRINC, MODE=IND, NUM=?n, PER=?p, TENSE=?t, SEM=<\e.(?v(e) & ?obj(\x. tema(e, x)))>] -> Verb[SUBCAT=M, MODE=IND, TENSE=?t, PER=?p, NUM=?n, SEM=?v] NP[SEM=?obj]
VP[+PRINC, MODE=IMP, NUM=?n, PER=?p, TENSE=?t, SEM=<\e.(?v(e) & ?obj(\x. tema(e, x)))>] -> Verb[SUBCAT=M, MODE=IMP, TENSE=?t, PER=?p, NUM=?n, SEM=?v] NP[SEM=?obj]

# VPs ditransitivos
VP[+PRINC, MODE=IND, NUM=?n, PER=?p, TENSE=?t, SEM=<\e.(?v(e) & ?obj(\x. tema(e, x)) & ?oi(\x. meta(e, x)))>] -> Verb[SUBCAT=M, MODE=IND, TENSE=?t, PER=?p, NUM=?n, SEM=?v] NP[SEM=?obj] PP[FORM='a', SEM=?oi]


# VPs en subordinadas 
VP[-PRINC, NUM=?n, PER=?p, TENSE=?t, SEM=?s] -> Verb[SUBCAT=M, MODE=SUBJ, TENSE=?t, PER=?p, NUM=?n, SEM=?s]
VP[-PRINC, NUM=?n, PER=?p, TENSE=?t, SEM=?s] -> Verb[SUBCAT=M, MODE=INF, TENSE=?t, PER=?p, NUM=?n, SEM=?s]
VP[-PRINC, NUM=?n, PER=?p, TENSE=?t, SEM=?s] -> Verb[SUBCAT=M, MODE=GDIO, TENSE=?t, PER=?p, NUM=?n, SEM=?s]


# Reescritura de Verb (Frases verbales formadas por un verbo principal o una perífrasis 
# verbal, equivale grosso modo a Verb en Chomsky 1957)

# Verb para verbos sintéticos
Verb[SUBCAT=M, MODE=IND, TENSE=?t, PER=?p, NUM=?n, SEM=?s] -> V[SUBCAT=M, MODE=IND, TENSE=?t, PER=?p, NUM=?n, SEM=?s]

# Verb para verbos analíticos (tiempos compuestos, perífrasis verbales, locuciones verbales)
Verb[SUBCAT=M, MODE=?mode, TENSE=?t, PER=?p, NUM=?n, SEM=<\e. (?s(e) & ?r(e))>] -> V[SUBCAT='A', LEMA='haber', TENSE=?t, MODE=?mode, PER=?p, NUM=?n, SEM=?r] V[SUBCAT=M, MODE=PPIO, SEM=?s]

# Sintagmas preposicionales
# Para que esto funcione hay que agregar al rules_builder las preposicionaes
PP[FORM='a', SEM=?met] -> X[LEMA='_a'] NP[SEM=?met]
# Esta es para objetos indirectos
PP[FORM=?lem, SEM=<?preps(?met)>] -> X[LEMA=?lem, SEM=?preps] NP[SEM=?met]


#Comentario sobre la X en lugar de prep: 
#No se si me convence corrernos de eagles, por cuestiones de 
#compatibilidad. A modo de Poc probe cambiar la etiqueta de preposiciones
#SP por XP. Reanote las entradas de MM.tanc.txt SP > XP e hice los reemplazos
#que consideré para mantener la funcionalidad. 
#No fui por la mantener la S como tag de la categoría por que choca con la S de
#símbolo inicial, pero bien podríamos ver otra opcion. 


# ###################
# Léxico de base
# ###################


# Determinantes y pronombres demostrativos

# La semántica de los determinantes definidos involucran el operador iota 
# Para que ande, hicimos cambios en la carpeta sem de NLTK
# Si se utiliza con la versión oficial de NLTK, comentar estas reglas que involucran iota
# El nombre de los determinantes cambió a D para facilitar el rules_builder.


#D[NUM=sg,GEN=masc, PER=3, SEM=<\P Q. Q(iota x. (singular(x) & P(x)))>] -> 'este' | 'el' | 'ese'
#D[NUM=pl,GEN=masc, PER=3, SEM=<\P Q. Q(iota x. (plural(x) & P(x)))>] -> 'estos' | 'los' | 'esos'
#D[NUM=sg,GEN=fem, PER=3, SEM=<\P Q. Q(iota x. (singular(x) & P(x)))>] -> 'esta' | 'la' | 'esa'
#D[NUM=pl,GEN=fem, PER=3, SEM=<\P Q. Q(iota x. (plural(x) & P(x)))>] -> 'estas' | 'las' | 'esas'

D[NUM=sg,GEN=masc,SEM=<\P Q.exists x.(singular(x) & P(x) & Q(x))>] -> 'algún'
D[NUM=pl,GEN=masc,SEM=<\P Q.exists x.(plural(x) & P(x) & Q(x))>] -> 'algunos'
D[NUM=sg,GEN=fem,SEM=<\P Q.exists x.(singular (x) & P(x) & Q(x))>] -> 'alguna'
D[NUM=pl,GEN=fem,SEM=<\P Q.exists x.(plural(x) & P(x) & Q(x))>] -> 'algunas'
D[NUM=sg,GEN=masc,SEM=<\P Q.exists x.(singular(x) & P(x) & Q(x))>] -> 'un'
D[NUM=sg,GEN=fem,SEM=<\P Q.exists x.(singular(x) & P(x) & Q(x))>] -> 'una'
D[NUM=pl,GEN=masc,SEM=<\P Q.exists x.(plural(x) & P(x) & Q(x))>] -> 'unos'
D[NUM=pl,GEN=fem,SEM=<\P Q.exists x.(plural(x) & P(x) & Q(x))>] -> 'unas'


# Nombres propios (una lista preliminar, habría que ver si los nombres propios se pueden incorporar de un modo más automatizado)

PropN[+ANIM,NUM=sg,GEN=masc,SEM=<\P.P(martin)>] -> 'Martín'
PropN[+ANIM,NUM=sg,GEN=masc,SEM=<\P.P(matias)>] -> 'Matías'
PropN[+ANIM,NUM=sg,GEN=masc,SEM=<\P.P(chafa)>] -> 'Chafa'
PropN[+ANIM,NUM=sg,GEN=masc,SEM=<\P.P(fede)>] -> 'Fede' | 'Federico'
PropN[+ANIM,NUM=sg,GEN=masc,SEM=<\P.P(pablo)>] -> 'Pablo' 
PropN[+ANIM,NUM=sg,GEN=masc,SEM=<\P.P(fer)>] -> 'Fer' | 'Fernando' | 'Ferchu'
PropN[+ANIM,NUM=sg,GEN=masc,SEM=<\P.P(carlos)>] -> 'Carlos'
PropN[+ANIM,NUM=sg,GEN=masc,SEM=<\P.P(jose)>] -> 'José'
PropN[+ANIM,NUM=sg,GEN=masc,SEM=<\P.P(juan)>] -> 'Juan'
PropN[+ANIM,NUM=sg,GEN=masc,SEM=<\P.P(rodrigo)>] -> 'Rodrigo'
PropN[+ANIM,NUM=sg,GEN=masc,SEM=<\P.P(andres)>] -> 'Andrés'
PropN[+ANIM,NUM=sg,GEN=masc,SEM=<\P.P(santiago)>] -> 'Santiago' | 'Santi'
PropN[+ANIM,NUM=sg,GEN=fem,SEM=<\P.P(julia)>] -> 'Julia'
PropN[+ANIM,NUM=sg,GEN=fem,SEM=<\P.P(cata)>] -> 'Cata' | 'Catalina'
PropN[+ANIM,NUM=sg,GEN=fem,SEM=<\P.P(macarena)>] -> 'Maca' | 'Macarena'
PropN[+ANIM,NUM=sg,GEN=fem,SEM=<\P.P(victoria)>] -> 'Vicky' | 'Victoria'
PropN[+ANIM,NUM=sg,GEN=fem,SEM=<\P.P(romi)>] -> 'Romi' | 'Romina'
PropN[+ANIM,NUM=sg,GEN=fem,SEM=<\P.P(rocio)>] -> 'Rocío'
PropN[+ANIM,NUM=sg,GEN=fem,SEM=<\P.P(natalia)>] -> 'Nati' | 'Natalia'
PropN[-ANIM,NUM=sg,GEN=masc,SEM=<\P.P(ficciones)>] -> 'Ficciones'
PropN[-ANIM,NUM=sg,GEN=fem,SEM=<\P.P(argentina)>] -> 'Argentina'
PropN[-ANIM,NUM=sg,GEN=masc,SEM=<\P.P(rayuela)>] -> 'Rayuela'


# Pronombres personales ()

Pron[NUM=sg, PER=1, GEN=?p, SEM=<\P.P(hablante)>] -> 'yo'
Pron[NUM=sg, PER=2, GEN=?p, SEM=<\P.P(oyente)>] -> 'vos' | 'usted' | 'tú'
Pron[NUM=sg, PER=3, GEN=masc, SEM=<\P.P(noparticipante)>] -> 'él'
Pron[NUM=sg, PER=3, GEN=fem, SEM=<\P.P(noparticipante)>] -> 'ella'
Pron[NUM=pl, PER=1, GEN=?p, SEM=<\P.P(hablante)>] -> 'nosotros'
Pron[NUM=pl, PER=2, GEN=?p, SEM=<\P.P(hablante)>] -> 'ustedes'
Pron[NUM=pl, PER=3, GEN=masc, SEM=<\P.P(noparticipante)>] -> 'ellos'
Pron[NUM=pl, PER=3, GEN=fem, SEM=<\P.P(noparticipante)>] -> 'ellas'




