## Natural Language Toolkit: sem3.fcfg
##
## Adaptada a partir de la siguiente gramatica:
## Alternative simple grammar with transitive verbs and 
## quantifiers for the book. 
## 
## Author: Ewan Klein <ewan@inf.ed.ac.uk> 
## URL: <http://nltk.sourceforge.net>
## For license information, see LICENSE.TXT
## 
## Posee modelo de semantica proposicional no eventiva

% start S
############################
# Grammar Rules
#############################

S[SEM = <?subj(?vp)>] -> NP[NUM=?n,GEN=?g,SEM=?subj] VP[NUM=?n,GEN=?g,SEM=?vp]

NP[NUM=?n,GEN=?g,SEM=<?det(?nom)>] -> Det[NUM=?n,GEN=?g,SEM=?det]  Nom[NUM=?n,GEN=?g,SEM=?nom]
NP[LOC=?l,NUM=?n,GEN=?g,SEM=?np] -> PropN[LOC=?l,NUM=?n,GEN=?g,SEM=?np]

Nom[NUM=?n,GEN=?g,SEM=?nom] -> N[NUM=?n,GEN=?g,SEM=?nom]

VP[NUM=?n,SEM=?v] -> IV[NUM=?n,SEM=?v]
VP[NUM=?n,SEM=<?v(?obj)>] -> TV[NUM=?n,SEM=?v] NP[SEM=?obj]
VP[NUM=?n,SEM=<?v(?obj,?pp)>] -> DTV[NUM=?n,SEM=?v] NP[SEM=?obj] PP[+A,SEM=?pp]
VP[NUM=?n,GEN=?g,SEM=<?v(?a)>] -> VCOP[NUM=?n] A[NUM=?n,GEN=?g,SEM=?a]


PP[+A, SEM=?np] -> P[+A] NP[SEM=?np]

#############################
# Lexical Rules
#############################

PropN[-LOC,NUM=sg,GEN=masc,SEM=<\P.P(martin)>] -> 'Martín'
PropN[-LOC,NUM=sg,GEN=fem,SEM=<\P.P(cata)>] -> 'Cata'
PropN[-LOC,NUM=sg,GEN=masc,SEM=<\P.P(fede)>] -> 'Fede'
PropN[-LOC,NUM=sg,GEN=masc,SEM=<\P.P(pablo)>] -> 'Pablo'
PropN[-LOC,NUM=sg,GEN=fem,SEM=<\P.P(julia)>] -> 'Julia'
PropN[-LOC,NUM=sg,GEN=masc,SEM=<\P.P(fer)>] -> 'Fer'
PropN[-LOC,NUM=sg,GEN=fem,SEM=<\P.P(maca)>] -> 'Maca'


Det[NUM=sg,GEN=masc,SEM=<\P Q.exists x.(unico_ind_relevante_en_contexto(x) & P(x) & Q(x))>] -> 'el'
Det[NUM=sg,GEN=fem,SEM=<\P Q.exists x.(unico_ind_relevante_en_contexto(x) & P(x) & Q(x))>] -> 'la'
Det[NUM=sg,GEN=masc,SEM=<\P Q.exists x.(unico_ind_pl_relevante_en_contexto(x) & P(x) & Q(x))>] -> 'los'
Det[NUM=sg,GEN=fem,SEM=<\P Q.exists x.(unico_ind_pl_relevante_en_contexto(x) & P(x) & Q(x))>] -> 'las'

Det[NUM=sg,GEN=masc,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'algún'
Det[NUM=pl,GEN=masc,SEM=<\P Q.exists x.(ind_pl(x) & P(x) & Q(x))>] -> 'algunos'
Det[NUM=sg,GEN=fem,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'alguna'
Det[NUM=pl,GEN=fem,SEM=<\P Q.exists x.(ind_pl(x) & P(x) & Q(x))>] -> 'algunas'
Det[NUM=sg,GEN=masc,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'un'
Det[NUM=sg,GEN=fem,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'una'
Det[NUM=pl,GEN=masc,SEM=<\P Q.exists x.(ind_pl(x) & P(x) & Q(x))>] -> 'unos'
Det[NUM=pl,GEN=fem,SEM=<\P Q.exists x.(ind_pl(x) & P(x) & Q(x))>] -> 'unas'

N[NUM=sg,GEN=masc,SEM=<\x.globo(x)>] -> 'globo'
N[NUM=pl,GEN=masc,SEM=<\x.globo(x)>] -> 'globos'
N[NUM=sg,GEN=fem,SEM=<\x.chica(x)>] -> 'chica'
N[NUM=sg,GEN=masc,SEM=<\x.chico(x)>] -> 'chico'
N[NUM=sg,GEN=masc,SEM=<\x.hombre(x)>] -> 'hombre'
N[NUM=pl,GEN=masc,SEM=<\x.hombre(x)>] -> 'hombres'
N[NUM=sg,GEN=fem,SEM=<\x.mujer(x)>] -> 'mujer'
N[NUM=pl,GEN=fem,SEM=<\x.mujer(x)>] -> 'mujeres'
N[NUM=sg,GEN=masc,SEM=<\x.perro(x)>] -> 'perro'
N[NUM=pl,GEN=masc,SEM=<\x.perro(x)>] -> 'perros'
N[NUM=sg,GEN=masc,SEM=<\x.gato(x)>] -> 'gato'
N[NUM=pl,GEN=masc,SEM=<\x.gato(x)>] -> 'gatos'
N[NUM=sg,GEN=masc,SEM=<\x.regalo(x)>] -> 'regalo'
N[NUM=pl,GEN=masc,SEM=<\x.regalo(x)>] -> 'regalos'
N[NUM=sg,GEN=masc,SEM=<\x.paquete(x)>] -> 'paquete'
N[NUM=pl,GEN=masc,SEM=<\x.paquete(x)>] -> 'paquetes'
N[NUM=sg,GEN=masc,SEM=<\x.tabaco(x)>] -> 'tabaco'
N[NUM=pl,GEN=masc,SEM=<\x.cigarrillo(x)>] -> 'cigarrillos'
N[NUM=sg,GEN=masc,SEM=<\x.cigarrillo(x)>] -> 'cigarrillo'
N[NUM=sg,GEN=masc,SEM=<\x.libro(x)>] -> 'libro'
N[NUM=pl,GEN=masc,SEM=<\x.libro(x)>] -> 'libros'


VCOP[NUM=sg] -> 'es'|'era'|'fue'
VCOP[NUM=pl] -> 'son'|'eran'|'fueron'
VCOP[NUM=sg] -> 'está'|'estaba'|'estuvo'
VCOP[NUM=pl] -> 'están'|'estaban'|'estuvieron'

IV[NUM=sg,SEM=<\x.fumar(x)>,TNS=pres] -> 'fuma'
IV[NUM=pl,SEM=<\x.fumar(x)>,TNS=pres] -> 'fuman'
IV[NUM=sg,SEM=<\x.caminar(x)>,TNS=pres] -> 'camina'
IV[NUM=pl,SEM=<\x.caminar(x)>,TNS=pres] -> 'caminan'
IV[NUM=sg,SEM=<\x.correr(x)>,TNS=pres] -> 'corre'
IV[NUM=pl,SEM=<\x.correr(x)>,TNS=pres] -> 'corren'
IV[NUM=sg,SEM=<\x.correr(x)>,TNS=pas] -> 'corrió'
IV[NUM=pl,SEM=<\x.correr(x)>,TNS=pas] -> 'corrieron'
IV[NUM=sg,SEM=<\x.explotar(x)>,TNS=pres] -> 'explota'
IV[NUM=pl,SEM=<\x.explotar(x)>,TNS=pres] -> 'explotan'
IV[NUM=sg,SEM=<\x.explotar(x)>,TNS=pas] -> 'explotó'
IV[NUM=pl,SEM=<\x.explotar(x)>,TNS=pas] -> 'explotaron'

TV[NUM=sg,SEM=<\X x.X(\y.mirar(x,y))>,TNS=pres] -> 'mira'
TV[NUM=pl,SEM=<\X x.X(\y.mirar(x,y))>,TNS=pres] -> 'miran'
TV[NUM=sg,SEM=<\X x.X(\y.romper(x,y))>,TNS=pres] -> 'rompe'
TV[NUM=pl,SEM=<\X x.X(\y.romper(x,y))>,TNS=pres] -> 'rompen'
TV[NUM=sg,SEM=<\X x.X(\y.morder(x,y))>,TNS=pres] -> 'muerde'
TV[NUM=pl,SEM=<\X x.X(\y.morder(x,y))>,TNS=pres] -> 'muerden'

DTV[NUM=sg,SEM=<\Y X x.X(\z.Y(\y.dar(x,y,z)))>,TNS=pres] -> 'da'
DTV[NUM=pl,SEM=<\Y X x.X(\z.Y(\y.dar(x,y,z)))>,TNS=pres] -> 'dan'
DTV[NUM=sg,SEM=<\Y X x.X(\z.Y(\y.dar(x,y,z)))>,TNS=pas] -> 'dio'
DTV[NUM=pl,SEM=<\Y X x.X(\z.Y(\y.dar(x,y,z)))>,TNS=pas] -> 'dieron'
DTV[NUM=sg,SEM=<\Y X x.X(\z.Y(\y.entregar(x,y,z)))>,TNS=pres] -> 'entrega'
DTV[NUM=pl,SEM=<\Y X x.X(\z.Y(\y.entregar(x,y,z)))>,TNS=pres] -> 'entregan'
DTV[NUM=sg,SEM=<\Y X x.X(\z.Y(\y.entregar(x,y,z)))>,TNS=pas] -> 'entregó'
DTV[NUM=pl,SEM=<\Y X x.X(\z.Y(\y.entregar(x,y,z)))>,TNS=pas] -> 'entregaron'
DTV[NUM=sg,SEM=<\Y X x.X(\z.Y(\y.enviar(x,y,z)))>,TNS=pres] -> 'envía'
DTV[NUM=pl,SEM=<\Y X x.X(\z.Y(\y.enviar(x,y,z)))>,TNS=pres] -> 'envían'
DTV[NUM=sg,SEM=<\Y X x.X(\z.Y(\y.enviar(x,y,z)))>,TNS=pas] -> 'envió'
DTV[NUM=pl,SEM=<\Y X x.X(\z.Y(\y.enviar(x,y,z)))>,TNS=pas] -> 'enviaron'

P[+a] -> 'a'

A[NUM=sg,GEN=fem,SEM=<\x.ocupado(x)>] -> 'ocupada'
A[NUM=pl,GEN=fem,SEM=<\x.ocupado(x)>] -> 'ocupadas'
A[NUM=sg,GEN=masc,SEM=<\x.ocupado(x)>] -> 'ocupado'
A[NUM=pl,GEN=masc,SEM=<\x.ocupado(x)>] -> 'ocupados'
A[NUM=sg,GEN=fem,SEM=<\x.cansado(x)>] -> 'cansada'
A[NUM=pl,GEN=fem,SEM=<\x.cansado(x)>] -> 'cansadas'
A[NUM=sg,GEN=masc,SEM=<\x.cansado(x)>] -> 'cansado'
A[NUM=pl,GEN=masc,SEM=<\x.cansado(x)>] -> 'cansados'
A[NUM=sg,GEN=fem,SEM=<\x.ocupado(x)>] -> 'fumada'
A[NUM=pl,GEN=fem,SEM=<\x.ocupado(x)>] -> 'fumadas'
A[NUM=sg,GEN=masc,SEM=<\x.ocupado(x)>] -> 'fumado'
A[NUM=pl,GEN=masc,SEM=<\x.ocupado(x)>] -> 'fumados'


